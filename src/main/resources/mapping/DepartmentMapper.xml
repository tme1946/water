<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ptteng.water.system.mapper.DepartmentMapper">
    <resultMap id="BaseResultMap" type="com.ptteng.water.system.pojo.Department">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="create_at" jdbcType="BIGINT" property="createAt" />
        <result column="create_by" jdbcType="BIGINT" property="createBy" />
        <result column="update_at" jdbcType="BIGINT" property="updateAt" />
        <result column="update_by" jdbcType="BIGINT" property="updateBy" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="principal" jdbcType="VARCHAR" property="principal" />
        <result column="budget" jdbcType="VARCHAR" property="budget" />
        <result column="parent_id" jdbcType="BIGINT" property="parentId" />
        <result column="type" jdbcType="TINYINT" property="type" />
        <result column="status" jdbcType="TINYINT" property="status" />
        <result column="address" jdbcType="LONGVARCHAR" property="address" />
        <result column="intro" jdbcType="LONGVARCHAR" property="intro" />
        <result column="condition" jdbcType="LONGVARCHAR" property="condition" />
        <result column="grade" jdbcType="VARCHAR" property="grade" />
        <result column="template_id" jdbcType="BIGINT" property="templateId" />
        <result column="year" jdbcType="INTEGER" property="year" />
    </resultMap>

    <sql id="Base_Column_List">
        id, create_at, create_by, update_at, update_by, `name`, principal, budget, parent_id,
        `type`, `status`, address, intro, `condition`, template_id, `year`, grade
    </sql>

    <parameterMap id="Department" type="com.ptteng.water.system.pojo.Department"/>

    <select id="listDepartmentByQuery" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from department
        <where>
            <if test="name != null ">
                and name like CONCAT(CONCAT('%', #{name}), '%')
            </if>
            <if test="type != null">
                and type = #{type}
            </if>
            <if test="parentId != null">
                and parent_id = #{parentId}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="budgetLow != null">
                and budget  <![CDATA[ >= ]]> #{budgetLow}
            </if>
            <if test="budgetHigh != null">
                and budget  <![CDATA[ <= ]]> #{budgetHigh}
            </if>
            <if test="gradeLow != null">
                and grade  <![CDATA[ >= ]]> #{gradeLow}
            </if>
            <if test="gradeHigh != null">
                and grade  <![CDATA[ <= ]]> #{gradeHigh}
            </if>
        </where>
        order by id desc
    </select>

    <select id="findNameById" resultType="java.lang.String">
        select name
        from department
        where id = #{id}
    </select>

    <select id="findById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from department
        where id = #{id}
    </select>

    <update id="updateDepartment" parameterMap="Department">
        update department
        <set>
            <if test="name != null">
                `name` = #{name},
            </if>
            <if test="type != null">
                `type` = #{type},
            </if>
            <if test="principal != null">
                principal = #{principal},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId},
            </if>
            <if test="budget != null">
                budget = #{budget},
            </if>
            <if test="templateId != null">
                template_id = #{templateId},
            </if>
            <if test="year != null">
                `year` = #{year},
            </if>
            <if test="grade != null">
                grade = #{grade},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
            <if test="intro != null">
                intro = #{intro},
            </if>
            <if test="condition != null">
                `condition` = #{condition},
            </if>
            <if test="createBy != null">
                create_by = #{createBy},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy},
            </if>
            <if test="createAt != null">
                create_at = #{createAt},
            </if>
            <if test="updateAt != null">
                update_at = #{updateAt},
            </if>
        </set>
        where id = #{id}
    </update>

    <insert id="addDepartment" parameterMap="Department" useGeneratedKeys="true" keyProperty="id">
        insert into
        department (create_at, create_by, update_at, update_by, `name`, principal, budget, parent_id,
        `type`, address, intro, `condition`, template_id, `year`, status)
        values (#{createAt}, #{createBy}, #{updateAt}, #{updateBy}, #{name}, #{principal}, #{budget}, #{parentId},
        #{type}, #{address}, #{intro}, #{condition}, #{templateId}, #{year}, #{status})
    </insert>

    <delete id="deleteDepartment" parameterType="java.lang.Long">
        delete from department
        where id = #{id}
    </delete>

    <select id="findParents" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from department
        where parent_id = 0
    </select>

    <select id="findByTemplateId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from department
        where template_id = #{templateId}
    </select>

    <select id="findByName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from department
        where name = #{name}
    </select>

    <select id="findTemplateId" resultType="java.lang.Long">
        select distinct template_id
         from department
    </select>

    <delete id="deleteByParent" parameterType="java.lang.Long">
        delete from department
        where parent_id = #{parentId}
    </delete>
</mapper>